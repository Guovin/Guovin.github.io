<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker+Uwsgi+Nginx部署Django项目</title>
    <url>/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="版本信息："><a href="#版本信息：" class="headerlink" title="版本信息："></a>版本信息：</h2><p>系统：Centos7<br>Python:3.6.2<br>Django：2.2.0</p>
<span id="more"></span>
<h2 id="Docker配置"><a href="#Docker配置" class="headerlink" title="Docker配置"></a>Docker配置</h2><p>docker安装方法请自行搜索并安装。</p>
<p>创建一个Centos容器，让它在后台运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name freestudy --network host centos:7 <span class="built_in">tail</span> -f /dev/null</span><br></pre></td></tr></table></figure>
<p>-d：让它在后台运行<br>    –name freestudy：设置名字。<br>    –network host：让它加入宿主机网络，从而可以连上外网<br>    centos:latest：要运行的镜像及其版本<br>    tail -f &#x2F;dev&#x2F;null：让容器一直执行某条命令，以免没有任务而自动退出</p>
<p>进入容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it freestudy bash</span><br></pre></td></tr></table></figure>
<p>-it：打开该容器的输入（stdin）和终端（tty）。 bash：在容器中执行bash命令，启动一个shell，供用户操作。</p>
<p>退出容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ctrl+D</span><br></pre></td></tr></table></figure>

<h2 id="Python及插件库环境配置"><a href="#Python及插件库环境配置" class="headerlink" title="Python及插件库环境配置"></a>Python及插件库环境配置</h2><p>将Django项目从宿主机拷贝到容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> /root/django freestudy:/root/</span><br></pre></td></tr></table></figure>
<p>之后便可以在Centos容器里部署Django项目，不满意就销毁重建。</p>
<p>安装Python及pip<br>进入容器：<br>安装Python解释器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release		<span class="comment"># 添加epel软件库</span></span><br><span class="line">yum install python36			<span class="comment"># 安装指定版本的python</span></span><br></pre></td></tr></table></figure>
<p>这里默认安装的是3.6.8版本</p>
<p>我想要安装3.6.2，直接用之前传好的文件安装吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> /tmp/Python-3.6.2.tgz 04c193b9e394:/</span><br></pre></td></tr></table></figure>

<p>安装ifconfig</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure>

<p>安装依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel gcc gcc-c++  openssl-devel libffi-devel python-devel mariadb-devel</span><br></pre></td></tr></table></figure>

<p>解压安装Python：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf Python-3.6.2.tgz -C  /tmp</span><br></pre></td></tr></table></figure>

<p>安装至&#x2F;usr&#x2F;local目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /tmp/Python-3.6.2/</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">yum -y install gcc automake autoconf libtool make</span><br><span class="line">make</span><br><span class="line">make altinstall</span><br></pre></td></tr></table></figure>

<p>更改&#x2F;usr&#x2F;bin&#x2F;python链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/bin/python3.6 /usr/bin/python3</span><br></pre></td></tr></table></figure>

<p>安装pip：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install python36-pip</span><br></pre></td></tr></table></figure>

<p>cd到项目requirements.txt目录下：<br>安装依赖库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3.6 install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>报错:需要更新pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>速度慢，看下上面报错是超时退出了。<br>遇到pip3 install的速度巨慢时，可以更换源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd </span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir .pip</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd .pip</span></span><br><span class="line">[root@localhost .pip]<span class="comment"># vim pip.conf</span></span><br></pre></td></tr></table></figure>
<p>写入如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url=http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com </span><br></pre></td></tr></table></figure>
<p>再次报错：<br>ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</p>
<p>升级setuptools：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3.6 install --upgrade setuptools</span><br></pre></td></tr></table></figure>

<p>出现报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Collecting django-pure-pagination</span><br><span class="line">  Downloading http://pypi.doubanio.com/packages/55/43/50c475f408d3350cec340855970a5ce02ea12f5a53d520315f200b4847a1/django-pure-pagination-0.3.0.tar.gz (10 kB)</span><br><span class="line">    ERROR: Command errored out with <span class="built_in">exit</span> status 1:</span><br><span class="line">     <span class="built_in">command</span>: /usr/bin/python3 -c <span class="string">&#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;/tmp/pip-install-belyzfl8/django-pure-pagination/setup.py&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;; __file__=&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;/tmp/pip-install-belyzfl8/django-pure-pagination/setup.py&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;;f=getattr(tokenize, &#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;open&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;, open)(__file__);code=f.read().replace(&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;\r\n&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;, &#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;\n&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;);f.close();exec(compile(code, __file__, &#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;exec&#x27;</span><span class="string">&quot;&#x27;&quot;</span><span class="string">&#x27;))&#x27;</span> egg_info --egg-base /tmp/pip-install-belyzfl8/django-pure-pagination/pip-egg-info</span><br><span class="line">         cwd: /tmp/pip-install-belyzfl8/django-pure-pagination/</span><br><span class="line">    Complete output (7 lines):</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File <span class="string">&quot;&lt;string&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      File <span class="string">&quot;/tmp/pip-install-belyzfl8/django-pure-pagination/setup.py&quot;</span>, line 5, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        README = readme.read()</span><br><span class="line">      File <span class="string">&quot;/usr/local/lib/python3.6/encodings/ascii.py&quot;</span>, line 26, <span class="keyword">in</span> decode</span><br><span class="line">        <span class="built_in">return</span> codecs.ascii_decode(input, self.errors)[0]</span><br><span class="line">    UnicodeDecodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t decode byte 0xc3 in position 672: ordinal not in range(128)</span></span><br><span class="line"><span class="string">    ----------------------------------------</span></span><br><span class="line"><span class="string">ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</span></span><br></pre></td></tr></table></figure>
<p>解决：<br>命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=en_US</span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br></pre></td></tr></table></figure>

<h2 id="安装Mariadb"><a href="#安装Mariadb" class="headerlink" title="安装Mariadb"></a>安装Mariadb</h2><p>安装Mariadb数据库容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mariadb</span><br><span class="line">docker run --name mariadb -p 3301:3306 -d -v /root/mdbdata:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=root1234 mariadb</span><br></pre></td></tr></table></figure>
<p>-d: 表示detach，后台运行并打印container ID；<br>-p: 端口，3301:3306表示将容器中的3306端口公开给host的3301端口；<br>-v: 表示volume，用来设置数据文件存放的位置，&#x2F;root&#x2F;mdbdata:&#x2F;var&#x2F;lib&#x2F;mysql表示将host中当前用户文件夹”&#x2F;root&#x2F;mdbdata”挂载于容器中的&#x2F;var&#x2F;lib&#x2F;mysql目录，这样即使容器被删除，数据文件还是可以保留；<br>-e: 表示environment，用来设置用户及密码等环境变量，MYSQL_ROOT_PASSWORD&#x3D;admin表示将root的密码设置为root1234（只在第一次登陆数据库时使用）；<br>–name: 表示容器的名称，例如现在这个数据库容器的名称为mariadb<br>命令的最后是镜像的名称，mariadb</p>
<p>修改为自启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container update --restart=always 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<p>测试登陆：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -proot1234 -h127.0.0.1 -P 3301 -D mysql</span><br></pre></td></tr></table></figure>

<p>创建数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE freestudy DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">（要指定编码，不然后面migrate数据迁移会报错）</span><br></pre></td></tr></table></figure>

<p>查询容器数据库ip：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect --format <span class="string">&#x27;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#x27;</span> 容器<span class="built_in">id</span></span><br><span class="line">172.17.0.3</span><br></pre></td></tr></table></figure>

<p>查看宿主机ip：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">172.17.0.1</span><br></pre></td></tr></table></figure>

<p>进入应用容器，同样适用ifconfig查看ip<br>172.17.0.1</p>
<p>进入应用容器，cd到settings.py,vim将mysql连接host修改：<br>172.17.0.3</p>
<h2 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h2><p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br></pre></td></tr></table></figure>
<p>将缺少的库一个个地pip3 install<br>遇到找不到的库就在名称前面加django-<br>如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-formtools</span><br><span class="line">pip install django-import-export</span><br></pre></td></tr></table></figure>
<p>（两个容器连接成功）</p>
<p>测试运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:80</span><br></pre></td></tr></table></figure>

<p>打开一个新对话：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:80</span><br></pre></td></tr></table></figure>
<p>成功访问。</p>
<h2 id="安装uWSGI服务器"><a href="#安装uWSGI服务器" class="headerlink" title="安装uWSGI服务器"></a>安装uWSGI服务器</h2><p>安装uWSGI：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure>

<p>进入django项目目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> conf</span><br><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line"><span class="built_in">mkdir</span> uwsgi</span><br><span class="line">vi uwsgi/uwsgi.ini</span><br></pre></td></tr></table></figure>
<p>输入配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysite_uwsgi.ini file</span></span><br><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># Django-related settings</span></span><br><span class="line"><span class="comment"># the base directory (full path)</span></span><br><span class="line"><span class="built_in">chdir</span>           = /root/django/FreeStudy</span><br><span class="line"><span class="comment"># Django&#x27;s wsgi file</span></span><br><span class="line">module          = FreeStudy.wsgi</span><br><span class="line"><span class="comment"># the virtualenv (full path)</span></span><br><span class="line"><span class="comment"># process-related settings</span></span><br><span class="line"><span class="comment"># master</span></span><br><span class="line">master          = <span class="literal">true</span></span><br><span class="line"><span class="comment"># maximum number of worker processes</span></span><br><span class="line">processes       = 10</span><br><span class="line"><span class="comment"># the socket (use the full path to be safe</span></span><br><span class="line">socket          = 127.0.0.1:8000</span><br><span class="line"><span class="comment"># ... with appropriate permissions - may be needed</span></span><br><span class="line"><span class="comment"># chmod-socket    = 664</span></span><br><span class="line"><span class="comment"># clear environment on exit</span></span><br><span class="line">vacuum          = <span class="literal">true</span></span><br><span class="line">logto = /tmp/mylog.log</span><br></pre></td></tr></table></figure>
<p>注：<br>    chdir： 表示需要操作的目录，也就是项目的目录<br>    module： wsgi文件的路径<br>    processes： 进程数<br>    virtualenv：虚拟环境的目录</p>
<p>使用配置文件启动uWSGI服务器（默认在后台运行）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uwsgi --ini uwsgi/uwsgi.ini</span><br></pre></td></tr></table></figure>
<p>显示运行成功了。</p>
<p>测试运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uwsgi --http :8000 --module FreeStudy.wsgi</span><br></pre></td></tr></table></figure>
<p>打开新对话：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:8000</span><br></pre></td></tr></table></figure>
<p>成功获取。</p>
<p>停止uWSGI服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uwsgi --stop uwsgi/uwsgi.pid</span><br></pre></td></tr></table></figure>


<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>
<h3 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conf/nginx/uc_nginx.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the upstream component nginx needs to connect to</span></span><br><span class="line">upstream django &#123;</span><br><span class="line"><span class="comment"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span></span><br><span class="line">server 127.0.0.1:8000; <span class="comment"># for a web port socket (we&#x27;ll use this first)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># configuration of the server</span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="comment"># the port your site will be served on</span></span><br><span class="line">listen 80;</span><br><span class="line"><span class="comment"># the domain name it will serve for</span></span><br><span class="line">server_name 服务器ip; <span class="comment"># substitute your machine&#x27;s IP address or FQDN</span></span><br><span class="line">charset utf-8;</span><br><span class="line"><span class="comment"># max upload size</span></span><br><span class="line">client_max_body_size 75M; <span class="comment"># adjust to taste</span></span><br><span class="line"><span class="comment"># Django media</span></span><br><span class="line">location /media &#123;</span><br><span class="line"> <span class="built_in">alias</span> /root/django/FreeStudy/media; <span class="comment"># 指向django的media目录</span></span><br><span class="line">&#125;</span><br><span class="line">location /static &#123;</span><br><span class="line"> <span class="built_in">alias</span> /root/django/FreeStudy/static; <span class="comment"># 指向django的static目录</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Finally, send all non-media requests to the Django server.</span></span><br><span class="line">location / &#123;</span><br><span class="line"> uwsgi_pass 127.0.0.1:8000;</span><br><span class="line"> include  /etc/nginx/uwsgi_params; <span class="comment"># the uwsgi_params file you installed</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将上述配置文件加入到nginx的启动配置文件中:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /root/django/FreeStudy/conf/nginx/uc_nginx.conf /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure>

<p>拉取所有需要的static file 到同一个目录<br>在django的setting文件中，添加下面一行内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;static/&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py collectstatic</span><br></pre></td></tr></table></figure>

<p>启动nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/sbin/nginx</span><br></pre></td></tr></table></figure>
<p>没有报错，查看进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure>
<p>没有看到uwsgi监听的端口</p>
<h3 id="解决Uwsgi没有启动"><a href="#解决Uwsgi没有启动" class="headerlink" title="解决Uwsgi没有启动"></a>解决Uwsgi没有启动</h3><p>使用curl 127.0.0.1:8000查看返回：<br>报错：<br>curl: (7) Failed connect to 127.0.0.1:8000; Connection refused</p>
<p>uwsgi错误检查：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看uwsgi进程运行:</span><br><span class="line"> ps -ef|grep uwsgi</span><br><span class="line"></span><br><span class="line">没有发现运行的进程。</span><br><span class="line"></span><br><span class="line">停止uwsgi：</span><br><span class="line">pkill -f uwsgi -9</span><br><span class="line"></span><br><span class="line">启动uwsgi：</span><br><span class="line">uwsgi  --ini  uwsgi.ini</span><br><span class="line"></span><br><span class="line">再次查看进程，还是没有！</span><br><span class="line">多次尝试修改配置文件，还是不行</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">要先运行项目：</span><br><span class="line">python3 manage.py runserver 0.0.0.0:8000</span><br><span class="line">注意端口是8000，要与uwsgi中配置一致</span><br><span class="line"></span><br><span class="line">执行uwsgi配置运行服务器：</span><br><span class="line">uwsgi -i /root/django/FreeStudy/conf/uwsgi/uwsgi.ini &amp; </span><br><span class="line">与刚开始上面不一样的输出。</span><br></pre></td></tr></table></figure>

<p>查看进程:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef|grep uwsgi</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/1.png" alt="1"></p>
<p>多了很多进程，一开始失败时只有最下面一个。大概率成功运行了。</p>
<p>在kill掉nginx进程的前提下，再次开启nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/sbin/nginx</span><br></pre></td></tr></table></figure>
<p>并检查检查，成功发行uwsgi进程</p>
<p><img src="/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/2.png" alt="2"></p>
<p>使用curl ip地址<br>成功获取页面。</p>
<h3 id="获取静态文件报错"><a href="#获取静态文件报错" class="headerlink" title="获取静态文件报错"></a>获取静态文件报错</h3><p>浏览器发现静态文件获取有误，报403错误，图片没有加载出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx</span><br><span class="line">vim nginx.conf</span><br><span class="line"></span><br><span class="line">将user nginx;</span><br><span class="line">改为：user root;</span><br><span class="line"></span><br><span class="line">重启nginx：</span><br><span class="line">/usr/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p>成功。</p>
<p>注意：<br>当使用python3 manage.py createsuperuser等出现报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERRORS:</span><br><span class="line">?: (staticfiles.E002) The STATICFILES_DIRS setting should not contain the STATIC_ROOT setting.</span><br><span class="line"></span><br><span class="line">将settings.py修改：</span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;/static/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">python3 manage.py createsuperuser</span><br><span class="line"></span><br><span class="line">出现reload不存在问题：</span><br><span class="line"><span class="built_in">cd</span> /usr/local/lib/python3.6/site-packages/</span><br><span class="line">vim sitecustomize_back.py</span><br><span class="line">内容为：</span><br><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line">             import sys</span><br><span class="line">             reload(sys)</span><br><span class="line">             sys.setdefaultencoding(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">出现报错：</span><br><span class="line">UnicodeEncodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t encode characters in position 0-2: ordinal not in range(128)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">执行：</span></span><br><span class="line"><span class="string">export PYTHONIOENCODING=utf-8</span></span><br></pre></td></tr></table></figure>

<h2 id="设置外网访问服务器数据库："><a href="#设置外网访问服务器数据库：" class="headerlink" title="设置外网访问服务器数据库："></a>设置外网访问服务器数据库：</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;外网访问密码&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="Navicat无法连接"><a href="#Navicat无法连接" class="headerlink" title="Navicat无法连接"></a>Navicat无法连接</h3><p>解决:<br>    上面修改了访问限权，容器之间的访问会受影响，需要到项目settings.py<br>    修改数据库连接配置，将连接密码由原来的root1234改为外网连接的密码</p>
<p>nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ntlp 查看进程状态</span><br><span class="line"><span class="built_in">kill</span> nginx的进程</span><br><span class="line"></span><br><span class="line">重新启动:</span><br><span class="line">/usr/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/4.png" alt="4"></p>
<p>进入mariadb容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br><span class="line"></span><br><span class="line">grep -rn <span class="string">&quot;skip-networking&quot;</span> *</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/5.png" alt="5"></p>
<p><img src="/2020/04/01/Docker-Uwsgi-Nginx%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/6.png" alt="6"></p>
<p>确保已经被注释掉了</p>
<h3 id="创建Mariadb镜像备份："><a href="#创建Mariadb镜像备份：" class="headerlink" title="创建Mariadb镜像备份："></a>创建Mariadb镜像备份：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -m<span class="string">&quot;mariadb&quot;</span> -a<span class="string">&quot;Such&quot;</span> 容器<span class="built_in">id</span> mariadb:v1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -t -i mariadb:v1 /bin/bash</span><br><span class="line"></span><br><span class="line">docker run --name mariadb –network=host -p 3301:3306 -d -v /root/mdbdata:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=root1234 mariadb:v1</span><br></pre></td></tr></table></figure>

<h2 id="redis容器"><a href="#redis容器" class="headerlink" title="redis容器"></a>redis容器</h2><p>实现邮箱验证码功能还要安装redis容器：<br>拉取镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure>

<p>运行容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure>
<p>邮箱验证码运行成功。</p>
<h2 id="解决拉取pull速度慢："><a href="#解决拉取pull速度慢：" class="headerlink" title="解决拉取pull速度慢："></a>解决拉取pull速度慢：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">	vim /etc/docker/daemon.json</span><br><span class="line">	</span><br><span class="line">	&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://9cpn8tt6.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">	重启服务：</span><br><span class="line">	systemctl daemon-reload</span><br><span class="line">	systemctl restart docker</span><br><span class="line">		</span><br><span class="line">		注意：此操作会将部分容器重启甚至停掉，需要使用docker start 容器名 开启。</span><br><span class="line">		并且mariadb的ip也变更了，需要至settings.py更新ip地址。</span><br><span class="line">		重启应用：</span><br><span class="line">			停止uwsgi：</span><br><span class="line">			ps -ef|grep uwsgi 查看进程</span><br><span class="line">			pkill -f uwsgi -9</span><br><span class="line">			nginx：</span><br><span class="line">			netstat -ntlp 查看进程状态</span><br><span class="line">			<span class="built_in">kill</span> nginx的进程</span><br><span class="line">		</span><br><span class="line">			python3 manage.py runserver 0.0.0.0:8000</span><br><span class="line">			</span><br><span class="line">			启动uwsgi与nginx：</span><br><span class="line">			uwsgi  --ini  uwsgi.ini (有时会失灵）</span><br><span class="line">			可使用uwsgi -i /root/django/FreeStudy/conf/uwsgi/uwsgi.ini &amp;</span><br><span class="line">			</span><br><span class="line">			/usr/sbin/nginx -s reload</span><br><span class="line">```			</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## xadmin无法加载css与js：</span></span><br><span class="line">```bash</span><br><span class="line"> python3 manage.py collectstatic </span><br></pre></td></tr></table></figure>
<p>自动把后台CSS样式和其他相关文件资源收集到&#x2F;static&#x2F;目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">报错：</span><br><span class="line">django.core.exceptions.ImproperlyConfigured: You<span class="string">&#x27;re using the staticfiles app without having set the STATIC_ROOT setting to a filesystem path.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">settings.py加入：</span></span><br><span class="line"><span class="string">STATIC_ROOT = os.path.join(BASE_DIR, &#x27;</span>static<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure>


<h2 id="域名解析："><a href="#域名解析：" class="headerlink" title="域名解析："></a>域名解析：</h2><p>添加解析后，将nginx配置文件（uc_nginx.conf)修改,<br>将ip地址改为你购买的域名地址</p>
<h2 id="vim相关操作："><a href="#vim相关操作：" class="headerlink" title="vim相关操作："></a>vim相关操作：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入 i表示插入</span><br><span class="line">操作完成后ESC</span><br><span class="line">输入：q直接退出，:q!强制退出</span><br><span class="line">输入：wq保存并退出</span><br><span class="line">直接输入ggV全选单行，输入ggVG全选全部，再接着输入d，即删除全部。</span><br></pre></td></tr></table></figure>

<h2 id="容器操作："><a href="#容器操作：" class="headerlink" title="容器操作："></a>容器操作：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+D可退出容器路径</span><br></pre></td></tr></table></figure>

<p>制作应用镜像备份：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker commit -m<span class="string">&quot;freestudy&quot;</span> -a<span class="string">&quot;Such&quot;</span> 容器<span class="built_in">id</span> freestudy:v1</span><br></pre></td></tr></table></figure>

<p>删除镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像<span class="built_in">id</span></span><br></pre></td></tr></table></figure>


<h2 id="更新文件："><a href="#更新文件：" class="headerlink" title="更新文件："></a>更新文件：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">可使用xftp直接修改文件，然后复制到容器实现修改。</span><br><span class="line">docker <span class="built_in">cp</span> /root/django/FreeStudy/apps/users/models.py freestudy:/root/django/FreeStudy/apps/users/models.py</span><br><span class="line"></span><br><span class="line">多个文件：</span><br><span class="line">新建一个文件夹，将文件放至其中，</span><br><span class="line">docker <span class="built_in">cp</span> /root/django/FreeStudy/templates/html/. freestudy:/root/django/FreeStudy/templates</span><br><span class="line">加多一个 . 即可将全部文件传输。</span><br></pre></td></tr></table></figure>

<p>涉及到数据表的修改要makemigrations与 migrate<br>然后停止uwsgi（避免占用8000端口），再运行python3 manage.py runserver 0.0.0.0:8000<br>启动uwsgi</p>
<h2 id="邮箱服务器安全性"><a href="#邮箱服务器安全性" class="headerlink" title="邮箱服务器安全性"></a>邮箱服务器安全性</h2><p>之前邮箱服务器使用了账号密码不安全，现改为授权码，同时之前使用的密码登陆服务失效，需要重新部署：<br>EMAIL_HOST_PASSWORD &#x3D; ‘授权码’</p>
<p>重新runserver，发现mysql连接报错。<br>尝试改了host地址，服务器的ip，数据库容器ip地址都不行。。<br>最后使用数据库容器ip 172.17.0.2，密码是外部连接的密码！连接成功。。稀奇古怪呀！</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Uwsgi</tag>
        <tag>Nginx</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo一些功能的实现</title>
    <url>/2019/11/03/hexo-blog/</url>
    <content><![CDATA[<p>网易云音乐播放插件，Valine样式的修改。<br>主要是列举了解决这两个比较难搞的功能。</p>
<span id="more"></span>
<h2 id="网易云音乐："><a href="#网易云音乐：" class="headerlink" title="网易云音乐："></a>网易云音乐：</h2><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install aplayer --save</span><br></pre></td></tr></table></figure>

<h3 id="实现播放列表"><a href="#实现播放列表" class="headerlink" title="实现播放列表"></a>实现播放列表</h3><p>将E:\hexo\node_modules\aplayer内的dist文件夹复制到E:\hexo\themes\next\source内<br>并在该文件夹内新建music.js</p>
<!--more-->
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> <span class="title class_">APlayer</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;aplayer&#x27;</span>),</span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">theme</span>: <span class="string">&#x27;#FADFA3&#x27;</span>,</span><br><span class="line">    <span class="attr">listFolded</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">listMaxHeight</span>: <span class="string">&#x27;300px&#x27;</span>,</span><br><span class="line">    <span class="attr">mutex</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">loop</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">    <span class="attr">order</span>: <span class="string">&#x27;random&#x27;</span>,</span><br><span class="line">    <span class="attr">preload</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">    <span class="attr">volume</span>: <span class="number">0.7</span>,</span><br><span class="line">    <span class="attr">lrcType</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">audio</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;夜空中最亮的星&#x27;</span>,</span><br><span class="line">            <span class="attr">artist</span>: <span class="string">&#x27;逃跑计划&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://music.163.com/song/media/outer/url?id=25706282.mp3&#x27;</span>,</span><br><span class="line">            <span class="attr">cover</span>: <span class="string">&#x27;http://p1.music.126.net/d541jx7SqoDzVkenhmtg6g==/19193074974743620.jpg&#x27;</span>,</span><br><span class="line">            <span class="attr">lrc</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&#x27;#ebd0c2&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;出卖&#x27;</span>,</span><br><span class="line">            <span class="attr">artist</span>: <span class="string">&#x27;简弘亦&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://music.163.com/song/media/outer/url?id=406086090.mp3&#x27;</span>,</span><br><span class="line">            <span class="attr">cover</span>: <span class="string">&#x27;http://p1.music.126.net/FiZafE2FWKsw3kEcJCsHSw==/1380986606501842.jp&#x27;</span>,</span><br><span class="line">            <span class="attr">lrc</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&#x27;#46718b&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;温柔&#x27;</span>,</span><br><span class="line">            <span class="attr">artist</span>: <span class="string">&#x27;五月天&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://music.163.com/song/media/outer/url?id=386001.mp3&#x27;</span>,</span><br><span class="line">            <span class="attr">cover</span>: <span class="string">&#x27;http://p2.music.126.net/_B1Fn_Z1WxHzqGLzLZDf-w==/109951163263882447.jpg&#x27;</span>,</span><br><span class="line">            <span class="attr">lrc</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&#x27;#FF9933&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;再见再见&#x27;</span>,</span><br><span class="line">            <span class="attr">artist</span>: <span class="string">&#x27;逃跑计划&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://music.163.com/song/media/outer/url?id=25706285.mp3&#x27;</span>,</span><br><span class="line">            <span class="attr">cover</span>: <span class="string">&#x27;http://p1.music.126.net/d541jx7SqoDzVkenhmtg6g==/19193074974743620.jpg&#x27;</span>,</span><br><span class="line">            <span class="attr">lrc</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&#x27;#336666&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Promise&#x27;</span>,</span><br><span class="line">            <span class="attr">artist</span>: <span class="string">&#x27;山岡晃&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://music.163.com/song/media/outer/url?id=18861490.mp3&#x27;</span>,</span><br><span class="line">            <span class="attr">cover</span>: <span class="string">&#x27;http://p1.music.126.net/QbadLxlMMmb4iStV4JnKLA==/6664139976590904.jpg&#x27;</span>,</span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&#x27;#663300&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="添加到侧边栏"><a href="#添加到侧边栏" class="headerlink" title="添加到侧边栏"></a>添加到侧边栏</h3><p>sidebar.swing内添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aplayer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/dist/music.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="添加到其它位置"><a href="#添加到其它位置" class="headerlink" title="添加到其它位置"></a>添加到其它位置</h3><p>上面这段引用也可以添加到文章中实现播放器。</p>
<h3 id="网易云MP3链接获取"><a href="#网易云MP3链接获取" class="headerlink" title="网易云MP3链接获取"></a>网易云MP3链接获取</h3><p><a href="http://music.163.com/song/media/outer/url?id=.mp3">http://music.163.com/song/media/outer/url?id=.mp3</a>‘<br>添加上对应歌曲的id即可。</p>
<h3 id="网易云lrc歌词链接获取"><a href="#网易云lrc歌词链接获取" class="headerlink" title="网易云lrc歌词链接获取"></a>网易云lrc歌词链接获取</h3><p><a href="http://music.163.com/api/song/media?id=">http://music.163.com/api/song/media?id=</a><br>添加上对应歌曲id即可。然后复制lyric的值，不用去除\n。</p>
<h2 id="Valine样式修改"><a href="#Valine样式修改" class="headerlink" title="Valine样式修改"></a>Valine样式修改</h2><h3 id="修改评论数量的样式："><a href="#修改评论数量的样式：" class="headerlink" title="修改评论数量的样式："></a>修改评论数量的样式：</h3><p><img src="/2019/11/03/hexo-blog/valine.png" alt="valine"></p>
<p>目的：改成中文，“评论数量”</p>
<p>一开始在Next主题目录下的layout_macro\post.swing寻找该样式发现<br><img src="/2019/11/03/hexo-blog/1.png" alt="1"></p>
<p>图片中除了想找的都在这个post.swing文件实现了，就是没有这个valine！<br>本地没有，网页部署后就有这个样式？<br><img src="/2019/11/03/hexo-blog/2.png" alt="2"></p>
<p>一番苦苦寻找后，发现它是用js动态生成的，位于next\scripts\filters\comment\valine.js文件夹内：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     injects.<span class="property">postMeta</span>.<span class="title function_">raw</span>(<span class="string">&#x27;valine&#x27;</span>, <span class="string">`</span></span><br><span class="line"><span class="string">       &#123;% if post.comments and (is_post() or theme.valine.comment_count) %&#125;</span></span><br><span class="line"><span class="string">       &lt;span class=&quot;post-meta-item&quot;&gt;</span></span><br><span class="line"><span class="string">         <span class="subst">$&#123;iconText(<span class="string">&#x27;comment-o&#x27;</span>, <span class="string">&#x27;valine&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">         &lt;a title=&quot;valine&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;#comments&quot; itemprop=&quot;discussionUrl&quot;&gt;</span></span><br><span class="line"><span class="string">           &lt;span class=&quot;post-comments-count valine-comment-count&quot; data-xid=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; itemprop=&quot;commentCount&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">         &lt;/a&gt;</span></span><br><span class="line"><span class="string">       &lt;/span&gt;</span></span><br><span class="line"><span class="string">       &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">      `</span>, &#123;&#125;, &#123;&#125;, theme.<span class="property">valine</span>.<span class="property">post_meta_order</span>);</span><br></pre></td></tr></table></figure>

<p>再到同一文件夹下的common.js文件查看这个iconText方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     <span class="title function_">iconText</span>(<span class="params">icon, key, defaultValue</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (!defaultValue) &#123;</span><br><span class="line">                 defaultValue = <span class="title function_">capitalize</span>(key);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">           &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span></span><br><span class="line"><span class="string">             &lt;i class=&quot;fa fa-<span class="subst">$&#123;icon&#125;</span>&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">           &lt;/span&gt;</span></span><br><span class="line"><span class="string">           &#123;%- set post_meta_comment = __(&#x27;post.comments.<span class="subst">$&#123;key&#125;</span>&#x27;) %&#125;</span></span><br><span class="line"><span class="string">          &#123;%- if post_meta_comment == &#x27;post.comments.<span class="subst">$&#123;key&#125;</span>&#x27; %&#125;</span></span><br><span class="line"><span class="string">            &#123;%- set post_meta_comment = &#x27;<span class="subst">$&#123;defaultValue&#125;</span>&#x27; %&#125;</span></span><br><span class="line"><span class="string">          &#123;%- endif %&#125;</span></span><br><span class="line"><span class="string">          &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; post_meta_comment + __(&#x27;symbol.colon&#x27;) &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>原来只要修改key这个值即可实现！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="title function_">iconText</span>(<span class="string">&#x27;comment-o&#x27;</span>, <span class="string">&#x27;评论数量&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>完成。</p>
<h3 id="网站无效果"><a href="#网站无效果" class="headerlink" title="网站无效果"></a>网站无效果</h3><p>一套hexo clean+hexo g+hexo d下来，github page并没有实现更新一部分功能，可以把public文件夹删除，再次执行上述步骤！</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue安卓异步请求效率优化方案（基于WebSocket）</title>
    <url>/2023/01/10/Vue%E5%AE%89%E5%8D%93%E8%AF%B7%E6%B1%82%E6%95%88%E7%8E%87%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88%EF%BC%88%E5%9F%BA%E4%BA%8EWebSocket%EF%BC%89/</url>
    <content><![CDATA[<h2 id="一-应用场景"><a href="#一-应用场景" class="headerlink" title="一. 应用场景"></a>一. 应用场景</h2><p>安卓app的构建方式是由前端页面嵌套在后端安卓外壳中，通过将接口方法配置到window全局对象中，实现前端请求后端提供的接口，后端也可调用前端定义的方法。</p>
<h3 id="主要缺点："><a href="#主要缺点：" class="headerlink" title="主要缺点："></a>主要缺点：</h3><p>接口无法异步执行，由于JS单线程机制，堵塞UI渲染，影响操作体验。</p>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><ol>
<li>页面切换速度缓慢，等待接口返回后再执行；</li>
<li>loading虽然在接口请求前就设置显示了，但实际效果就是在接口请求完成时才一闪而过； </li>
<li>无法实现动态进度条等效果。<span id="more"></span></li>
</ol>
<h2 id="二-WebSocket主体配置（消息发送-结果接收-心跳机制）"><a href="#二-WebSocket主体配置（消息发送-结果接收-心跳机制）" class="headerlink" title="二. WebSocket主体配置（消息发送+结果接收+心跳机制）"></a>二. WebSocket主体配置（消息发送+结果接收+心跳机制）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/modules/websocket.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; nanoid &#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; isValuable &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/util&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">websocket</span>: <span class="literal">null</span>, <span class="comment">// 建立的连接</span></span><br><span class="line">        <span class="attr">lockReconnect</span>: <span class="literal">false</span>, <span class="comment">// 是否真正建立连接</span></span><br><span class="line">        <span class="attr">pingTimeout</span>: <span class="number">15000</span>, <span class="comment">// 15秒一次心跳</span></span><br><span class="line">        <span class="attr">pingTimeoutObj</span>: <span class="literal">null</span>, <span class="comment">// 心跳倒计时</span></span><br><span class="line">        <span class="attr">serverTimeoutObj</span>: <span class="literal">null</span>, <span class="comment">// 心跳超时倒计时</span></span><br><span class="line">        <span class="attr">reTimeoutNum</span>: <span class="literal">null</span>, <span class="comment">// 断开重连倒计时</span></span><br><span class="line">        <span class="attr">callbackFunc</span>: &#123;&#125;, <span class="comment">// websocket callback函数</span></span><br><span class="line">        <span class="attr">apiName</span>: &#123;&#125;, <span class="comment">// 唯一码对应的接口名称</span></span><br><span class="line">        <span class="attr">timeObj</span>: &#123;&#125; <span class="comment">// 接口请求时间</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="comment">// 初始化websocket</span></span><br><span class="line">        <span class="title function_">webSocketInit</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建一个websocket对象【发送、接收、关闭socket都由这个对象操作】</span></span><br><span class="line">            state.<span class="property">websocket</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://127.0.0.1:3200&#x27;</span>)</span><br><span class="line">            state.<span class="property">websocket</span>.<span class="property">onopen</span> = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection success...&quot;</span>, res)</span><br><span class="line">                <span class="comment">// 启动心跳检测</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;webSocketStart&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            state.<span class="property">websocket</span>.<span class="property">onmessage</span> = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; uniqueType, context &#125; = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res.<span class="property">data</span>)</span><br><span class="line">                <span class="keyword">if</span> (uniqueType === <span class="string">&#x27;ping&#x27;</span> &amp;&amp; context === <span class="string">&#x27;pong&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 收到服务器信息，心跳重置</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;webSocketReset&#x27;</span>)</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;socket-pong&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 打印接口请求时长</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">apiName</span>[uniqueType], <span class="string">`<span class="subst">$&#123;(<span class="built_in">Date</span>.now() - state.timeObj[uniqueType]) / <span class="number">1000</span>&#125;</span>秒`</span>)</span><br><span class="line">                    <span class="keyword">delete</span> state.<span class="property">apiName</span>[uniqueType]</span><br><span class="line">                    <span class="keyword">delete</span> state.<span class="property">timeObj</span>[uniqueType]</span><br><span class="line">                    <span class="comment">// 处理接口数据</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;webSocketCallApi&#x27;</span>, &#123; uniqueType, context &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            state.<span class="property">websocket</span>.<span class="property">onclose</span> = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection closed...&quot;</span>, res)</span><br><span class="line">                <span class="comment">// 重连</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;webSocketReconnect&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            state.<span class="property">websocket</span>.<span class="property">onerror</span> = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection error...&quot;</span>, res)</span><br><span class="line">                <span class="comment">// 重连</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;webSocketReconnect&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 发送消息请求</span></span><br><span class="line">        <span class="title function_">webSocketSend</span>(<span class="params">state, &#123; apiUrl, context, callback = <span class="literal">null</span>&#125;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.<span class="property">websocket</span> &amp;&amp; state.<span class="property">websocket</span>.<span class="property">readyState</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 每个请求都有唯一的id</span></span><br><span class="line">                <span class="keyword">const</span> uniqueType = <span class="title function_">nanoid</span>()</span><br><span class="line">                <span class="keyword">const</span> c = <span class="title function_">isValuable</span>(context) ? <span class="keyword">typeof</span> context === <span class="string">&#x27;string&#x27;</span> ? context : <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(context) : <span class="literal">null</span></span><br><span class="line">                <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(</span><br><span class="line">                    &#123;</span><br><span class="line">                        uniqueType,</span><br><span class="line">                        apiUrl,</span><br><span class="line">                        <span class="attr">context</span>: c</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;query data&#x27;</span>, data)</span><br><span class="line">                state.<span class="property">apiName</span>[uniqueType] = apiUrl</span><br><span class="line">                state.<span class="property">timeObj</span>[uniqueType] = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">                state.<span class="property">websocket</span>.<span class="title function_">send</span>(data)</span><br><span class="line">                <span class="keyword">if</span> (callback) state.<span class="property">callbackFunc</span>[uniqueType] = callback</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 处理请求回调</span></span><br><span class="line">        webSocketCallApi (state, &#123; uniqueType, context &#125;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (uniqueType === <span class="string">&#x27;ping&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">const</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(context)</span><br><span class="line">            <span class="keyword">if</span> (state.<span class="property">callbackFunc</span>[uniqueType]) &#123;</span><br><span class="line">                state.<span class="property">callbackFunc</span>[uniqueType](res)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;setWsCallBackFunc&#x27;</span>, &#123; uniqueType, <span class="attr">callback</span>: <span class="literal">null</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 回调函数设置</span></span><br><span class="line">        setWsCallBackFunc (state, data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.<span class="property">callback</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">delete</span> state.<span class="property">callbackFunc</span>[data.<span class="property">uniqueType</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                state.<span class="property">callbackFunc</span>[data.<span class="property">uniqueType</span>] = data.<span class="property">callback</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 重新连接</span></span><br><span class="line">        <span class="title function_">webSocketReconnect</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.<span class="property">lockReconnect</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            state.<span class="property">lockReconnect</span> = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 没连接上会一直重连,5秒重试请求重连，设置延迟避免请求过多</span></span><br><span class="line">            state.<span class="property">reTimeoutNum</span> &amp;&amp; <span class="built_in">clearTimeout</span>(state.<span class="property">reTimeoutNum</span>)</span><br><span class="line">            state.<span class="property">reTimeoutNum</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 新连接</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;webSocketInit&#x27;</span>)</span><br><span class="line">                state.<span class="property">lockReconnect</span> = <span class="literal">false</span></span><br><span class="line">            &#125;, <span class="number">5000</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 重置心跳</span></span><br><span class="line">        <span class="title function_">webSocketReset</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="comment">// 清除时间</span></span><br><span class="line">            <span class="built_in">clearTimeout</span>(state.<span class="property">pingTimeoutObj</span>)</span><br><span class="line">            <span class="built_in">clearTimeout</span>(state.<span class="property">serverTimeoutObj</span>)</span><br><span class="line">            <span class="comment">// 重启心跳</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;webSocketStart&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 开启心跳</span></span><br><span class="line">        <span class="title function_">webSocketStart</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            state.<span class="property">pingTimeoutObj</span> &amp;&amp;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(state.<span class="property">pingTimeoutObj</span>)</span><br><span class="line">            state.<span class="property">serverTimeoutObj</span> &amp;&amp;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(state.<span class="property">serverTimeoutObj</span>)</span><br><span class="line">            state.<span class="property">pingTimeoutObj</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 这里发送一个心跳，后端收到后，返回一个心跳消息，</span></span><br><span class="line">                <span class="keyword">if</span> (state.<span class="property">websocket</span>.<span class="property">readyState</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果连接正常</span></span><br><span class="line">                    <span class="keyword">const</span> ping = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">                        <span class="attr">uniqueType</span>: <span class="string">&#x27;ping&#x27;</span>,</span><br><span class="line">                        <span class="attr">context</span>: <span class="string">&#x27;ping&#x27;</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    state.<span class="property">websocket</span>.<span class="title function_">send</span>(ping)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 否则重连</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;webSocketReconnect&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">serverTimeoutObj</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 超时关闭</span></span><br><span class="line">                    state.<span class="property">websocket</span>.<span class="title function_">close</span>()</span><br><span class="line">                &#125;, <span class="number">60000</span>)</span><br><span class="line">            &#125;, state.<span class="property">pingTimeout</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">webSocketSend</span>(<span class="params">&#123; commit &#125;, obj, func</span>) &#123;</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;webSocketSend&#x27;</span>, obj, func)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三-不同请求类型的具体应用"><a href="#三-不同请求类型的具体应用" class="headerlink" title="三. 不同请求类型的具体应用"></a>三. 不同请求类型的具体应用</h2><h3 id="主要参数："><a href="#主要参数：" class="headerlink" title="主要参数："></a>主要参数：</h3><ol>
<li>apiUrl：接口地址</li>
<li>context：请求参数</li>
<li>callback：回调方法</li>
</ol>
<h3 id="（1）同步执行（依赖接口结果）"><a href="#（1）同步执行（依赖接口结果）" class="headerlink" title="（1）同步执行（依赖接口结果）"></a>（1）同步执行（依赖接口结果）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> apiUrl = <span class="string">&#x27;class.updateGroupRemark&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;webSocketSend&#x27;</span>, &#123; apiUrl, <span class="attr">context</span>: <span class="variable language_">this</span>.<span class="property">remarkQuery</span>, <span class="attr">callback</span>: <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>( r.<span class="property">code</span> === <span class="number">0</span> ) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">dialogVisible</span> = <span class="literal">false</span></span><br><span class="line">     <span class="variable language_">this</span>.$emit(<span class="string">&#x27;refresh&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="（2）异步执行（结果互不影响）"><a href="#（2）异步执行（结果互不影响）" class="headerlink" title="（2）异步执行（结果互不影响）"></a>（2）异步执行（结果互不影响）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> api1 = <span class="string">&#x27;quickSync.initExpData&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;webSocketSend&#x27;</span>, &#123; <span class="attr">apiUrl</span>: api1, <span class="attr">callback</span>: <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">asyncResultHandler</span>(api1, r)</span><br><span class="line">&#125;&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> api2 = <span class="string">&#x27;quickSync.initTagValueData&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;webSocketSend&#x27;</span>, &#123; <span class="attr">apiUrl</span>: api2, <span class="attr">callback</span>: <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">asyncResultHandler</span>(api2, r)</span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Vue</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>iconfont乱码分析与解决方案</title>
    <url>/2022/01/14/iconfont%E4%B9%B1%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>项目使用 talebase-ui 组件的 iconfont 会偶尔出现乱码的情况：<br><img src="/2022/01/14/iconfont%E4%B9%B1%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/1.png" alt="1"></p>
<span id="more"></span>
<h2 id="问题定位分析："><a href="#问题定位分析：" class="headerlink" title="问题定位分析："></a>问题定位分析：</h2><p>定位到图标元素可以看到，组件的图标 Unicode 格式经 sass 编译后，都变成乱码格式了（错误地将 Unicode 字符作为文字字符编译输出）：</p>
<h4 id="图标未编译前："><a href="#图标未编译前：" class="headerlink" title="图标未编译前："></a>图标未编译前：</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.t-icon-search</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\e651&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="经-sass-编译后："><a href="#经-sass-编译后：" class="headerlink" title="经 sass 编译后："></a>经 sass 编译后：</h4><p><img src="/2022/01/14/iconfont%E4%B9%B1%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2.png" alt="2"></p>
<p>如果通过浏览器限速，模拟慢网速状态，则图标乱码的情况几乎每次必出现：<br><img src="/2022/01/14/iconfont%E4%B9%B1%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/3.png" alt="3"></p>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><h3 id="（1）node-sass-替换-sass（dart-sass）：这是网上出现最多的建议，但考虑到目前项目使用的是-sass，切换-node-sass-需要环境配置的兼容，可能会有许多未知的问题出现，故没有采用。"><a href="#（1）node-sass-替换-sass（dart-sass）：这是网上出现最多的建议，但考虑到目前项目使用的是-sass，切换-node-sass-需要环境配置的兼容，可能会有许多未知的问题出现，故没有采用。" class="headerlink" title="（1）node-sass 替换 sass（dart-sass）：这是网上出现最多的建议，但考虑到目前项目使用的是 sass，切换 node-sass 需要环境配置的兼容，可能会有许多未知的问题出现，故没有采用。"></a>（1）node-sass 替换 sass（dart-sass）：这是网上出现最多的建议，但考虑到目前项目使用的是 sass，切换 node-sass 需要环境配置的兼容，可能会有许多未知的问题出现，故没有采用。</h3><h3 id="（2）-升级-sass（推荐）"><a href="#（2）-升级-sass（推荐）" class="headerlink" title="（2） 升级 sass（推荐）"></a><font style="color: #f29100;">（2） 升级 sass（推荐）</font></h3><p><img src="/2022/01/14/iconfont%E4%B9%B1%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/4.png" alt="4"></p>
<p>查看 sass 的更新日志，幸运的是在<strong><a href="mailto:&#115;&#x61;&#115;&#x73;&#x40;&#x31;&#x2e;&#51;&#x38;&#46;&#x30;">&#115;&#x61;&#115;&#x73;&#x40;&#x31;&#x2e;&#51;&#x38;&#46;&#x30;</a></strong>版本时修复了这个问题，将 Unicode 字符作为转义序列而不是文字字符输出。<br>目前项目安装的 sass 依赖版本是 1.32.0，升级至 1.48.0 最新版后：<br><img src="/2022/01/14/iconfont%E4%B9%B1%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/5.png" alt="5"></p>
<center><font style="opacity: 0.5;">（Unicode图标编译成功）</font></center>

<p><font style="font-weight: bold; color: #FF0000;">注意：</font>升级 sass 版本后，项目可能会出现代码语法格式引起的报错（以下是宽度计算-号之间需加空格），修改成符合语法即可：<br><img src="/2022/01/14/iconfont%E4%B9%B1%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/6.png" alt="6"></p>
<h3 id="（3）采用自定义的-webpack-loader："><a href="#（3）采用自定义的-webpack-loader：" class="headerlink" title="（3）采用自定义的 webpack loader："></a>（3）采用自定义的 webpack loader：</h3><p>问题原因是 sass 将 Unicode 字符当成文字字符进行编译了，也就是说可以通过在 webpack 配置中添加自定义的 loader 在 sass-loader 之前，实现将文字字符转译成Unicode字符再由sass编译。</p>
<h4 id="转译原理"><a href="#转译原理" class="headerlink" title="转译原理"></a>转译原理</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文字字符转译：</span></span><br><span class="line">.<span class="property">sass</span>::after &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">icon</span>-<span class="attr">content</span>::after &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&quot;?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unicode字符转译：</span></span><br><span class="line">.<span class="property">sass</span>::after &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&quot;\4e2d\56fd&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">icon</span>-<span class="attr">content</span>::after &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&quot;\e6df&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="webpack-loader-实现："><a href="#webpack-loader-实现：" class="headerlink" title="webpack loader 实现："></a>webpack loader 实现：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// css-unicode-loader.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">UNICODE_MATCH_REG</span> = <span class="regexp">/[^\x00-\xff]/g</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CONTENT_MATCH_REG</span> = <span class="regexp">/(?&lt;!-)content\s*:\s*([^;\&#125;]+)/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">source</span>) &#123;</span><br><span class="line">  source = source.<span class="title function_">replace</span>(<span class="variable constant_">CONTENT_MATCH_REG</span>, <span class="keyword">function</span> (<span class="params">m</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> m.<span class="title function_">replace</span>(<span class="variable constant_">UNICODE_MATCH_REG</span>, <span class="keyword">function</span> (<span class="params">m</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;\\&quot;</span> + m.<span class="title function_">charCodeAt</span>(<span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="webpack-配置："><a href="#webpack-配置：" class="headerlink" title="webpack 配置："></a>webpack 配置：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sassLoader = <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;sass-loader&#x27;</span>)</span><br><span class="line">    config.<span class="property">module</span>.<span class="property">rules</span></span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function"><span class="params">rule</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rule.<span class="property">test</span>.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;scss&#x27;</span>) !== -<span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">forEach</span>(<span class="function"><span class="params">rule</span> =&gt;</span> &#123;</span><br><span class="line">        rule.<span class="property">oneOf</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">oneOfRule</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> sassLoaderIndex = oneOfRule.<span class="property">use</span>.<span class="title function_">findIndex</span>(</span><br><span class="line">            <span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">loader</span> === sassLoader</span><br><span class="line">          )</span><br><span class="line">          oneOfRule.<span class="property">use</span>.<span class="title function_">splice</span>(sassLoaderIndex, <span class="number">0</span>, &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;./css-unicode-loader&#x27;</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Sass</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Sass</tag>
        <tag>iconfont</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Github+Hexo的Blog</title>
    <url>/2019/11/03/my-first-blog/</url>
    <content><![CDATA[<p>搭建一个基于Github+Hexo的Blog</p>
<span id="more"></span>
<p>网上搜索就有一大堆的教程可以参考，一步一步实现即可。</p>
<h2 id="初步搭建教程："><a href="#初步搭建教程：" class="headerlink" title="初步搭建教程："></a>初步搭建教程：</h2><p><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa">http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/2020/04/03/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h2><p>给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9<br>因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9<br>所以返回 [0, 1]</p>
<span id="more"></span>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><h3 id="Python我的解："><a href="#Python我的解：" class="headerlink" title="Python我的解："></a>Python我的解：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                sums = nums[i] + nums[n]</span><br><span class="line">                <span class="keyword">if</span> sums == target:</span><br><span class="line">                    l = [i,n]</span><br><span class="line">                    <span class="keyword">return</span> l</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span>          </span><br></pre></td></tr></table></figure>
<p>耗时：<br>3684 ms</p>
<h3 id="Python最快解："><a href="#Python最快解：" class="headerlink" title="Python最快解："></a>Python最快解：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        lens = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(lens):</span><br><span class="line">            num1 = nums[i]</span><br><span class="line">            num2 = target - num1</span><br><span class="line">            <span class="keyword">if</span> hashmap.get(num2) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> ([i,hashmap[num2]])</span><br><span class="line">            hashmap[num1] = i <span class="comment">#这句不能放在if语句之前，解决list中有重复值或target-num=num的情况</span></span><br></pre></td></tr></table></figure>
<p>耗时：<br>20ms</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构思维导图</title>
    <url>/2020/04/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    <content><![CDATA[<span id="more"></span>
<p><img src="/2020/04/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/1.png" alt="1"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>爬楼梯</title>
    <url>/2020/04/07/%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定 n 是一个正整数。</p>
<h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶</li>
<li>2 阶<span id="more"></span></li>
</ol>
<h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶 + 1 阶</li>
<li>1 阶 + 2 阶</li>
<li>2 阶 + 1 阶</li>
</ol>
<h2 id="Python解："><a href="#Python解：" class="headerlink" title="Python解："></a>Python解：</h2><p>原理：相当于求菲波拉契数f(n) &#x3D; f(n-1) + f(n-2)<br>class Solution(object):<br>    def climbStairs(self, n):<br>        if n &lt;&#x3D; 2:<br>            return n<br>        else:<br>            f1, f2, f3 &#x3D; 1, 2, 3<br>            for i in range(3,n+1):<br>                f3 &#x3D; f1 + f2<br>                f1 &#x3D; f2<br>                f2 &#x3D; f3<br>            return f3</p>
<p>耗时：20ms</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>博客近期文章功能</title>
    <url>/2019/11/09/%E5%8D%9A%E5%AE%A2%E8%BF%91%E6%9C%9F%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h2 id="版本信息："><a href="#版本信息：" class="headerlink" title="版本信息："></a>版本信息：</h2><p>Nexo：4.0.0<br>Next：7.5.0</p>
<span id="more"></span>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="初步方法"><a href="#初步方法" class="headerlink" title="初步方法"></a>初步方法</h3><p>一开始想实现这个功能时，是参考网上的写法来写的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     &lt;!--近期文章版块 began--&gt;</span><br><span class="line">                         &#123;% <span class="keyword">if</span> theme.<span class="property">recent_posts</span> %&#125;</span><br><span class="line">                                 &lt;div <span class="keyword">class</span>=<span class="string">&quot;links-of-blogroll motion-element &#123;&#123; &quot;</span>links-<span class="keyword">of</span>-blogroll-<span class="string">&quot; + theme.recent_posts_layout  &#125;&#125;&quot;</span>&gt;</span><br><span class="line">                                     <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                         <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                         &#123;&#123; theme.recent_posts_title &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                                     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                                     <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                         &#123;% set posts = site.posts.sort(&#x27;-date&#x27;) %&#125;</span></span><br><span class="line"><span class="language-xml">                                        &#123;% for post in posts.slice(&#x27;0&#x27;, &#x27;5&#x27;) %&#125;</span></span><br><span class="line"><span class="language-xml">                                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&#x27;my-links-of-blogroll-li&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; post.title &#125;&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        &#123;% endfor %&#125;</span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                        &#123;% endif %&#125;</span><br><span class="line">                        &lt;!--近期文章版块 end--&gt;</span><br></pre></td></tr></table></figure>
<p>插入到sidebar.swig中。</p>
<h3 id="主题配置文件中加入："><a href="#主题配置文件中加入：" class="headerlink" title="主题配置文件中加入："></a>主题配置文件中加入：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     #近期文章</span><br><span class="line">     <span class="attr">recent_posts_title</span>: 近期文章</span><br><span class="line">     <span class="attr">recent_posts_layout</span>: block</span><br><span class="line">     <span class="attr">recent_posts</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>查看效果发现网页未能获取到文章的path与title。<br><img src="/2019/11/09/%E5%8D%9A%E5%AE%A2%E8%BF%91%E6%9C%9F%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/1.png" alt="1"></p>
<h2 id="开始调试："><a href="#开始调试：" class="headerlink" title="开始调试："></a>开始调试：</h2><h3 id="检查函数方法："><a href="#检查函数方法：" class="headerlink" title="检查函数方法："></a>检查函数方法：</h3><p>检查sort与slice是否有问题，用排除法：<br>添加多个文章，发现能截取5个文章，说明slice正常。<br>去除sort方法，不执行排序，然后查看网页效果，发现仍未能获取到，说明问题不在sort方法上。</p>
<p>还尝试了换不同方法的写法来排序：sort(‘date’,-1)等，出现报错等。</p>
<h3 id="检查变量："><a href="#检查变量：" class="headerlink" title="检查变量："></a>检查变量：</h3><p>查看Nexo官方文档，发现site.posts是获取整个网页的文章，site是网页变量，posts是全部文章的属性。<br>尝试单独输出site或site.posts，发现这是一个封装好的object，无法查看其中的内容。</p>
<h3 id="检查版本问题："><a href="#检查版本问题：" class="headerlink" title="检查版本问题："></a>检查版本问题：</h3><p>之前安装Hexo我是按照网上一个教程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<p>但查看Hexo官方文档的安装方法，却是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>不同安装方法，最后安装的Next的主题默认版本都不同，<br>教程：Next 7.5.0<br>官方：Next 5.1.4</p>
<p>发现使用Next 5.1.4插入上述代码，成功实现近期文章效果，成功获取。<br>而且发现5.1.4的文件与7.5.0有一定的区别。<br>一开始我的解决办法是想干脆将博客转到Next 5.1.4算了，但发现旧版主题网页的显示效果没有新版的好，而且迁移过程耗费精力，就放弃了。</p>
<h2 id="新的解决办法"><a href="#新的解决办法" class="headerlink" title="新的解决办法"></a>新的解决办法</h2><h3 id="查看官方文档"><a href="#查看官方文档" class="headerlink" title="查看官方文档"></a>查看官方文档</h3><p>开始查看Next的github官网文档，发现7.5.0更换了模板引擎，使用了Nunjucks作为模板引擎。<br>提出issue，官方人员提示我尝试使用toArray()来解决。</p>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>在修改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.<span class="property">posts</span>.<span class="title function_">toArray</span>()</span><br></pre></td></tr></table></figure>
<p>执行出现报错，然后去除sort和slice，再次执行，成功实现。</p>
<p>然后再依次加上slice和sort，发现当使用sort方法时出现报错。</p>
<p>考虑到要同时兼顾Nunjucks的写法来使用，查看文档：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">sort</span>(arr, reverse, caseSens, attr)</span><br></pre></td></tr></table></figure>
<p>用JavaScript中的arr.sort函数排序arr。如果reverse为true，则会返回相反的 排序结果。默认状态下排序不会区分大小写，但你可以将caseSens设置为true来让排序 区分大小写。我们可以用attr来指定要比较的属性。</p>
<h3 id="不同sort写法"><a href="#不同sort写法" class="headerlink" title="不同sort写法"></a>不同sort写法</h3><p>然后尝试了不同的写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.<span class="property">posts</span>.<span class="title function_">toArray</span>().<span class="title function_">sort</span>(<span class="string">&#x27;-date&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.<span class="property">posts</span>.<span class="title function_">toArray</span>().<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="property">date</span> - b.<span class="property">date</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>还有默认的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.<span class="property">posts</span>.<span class="title function_">sort</span>()</span><br><span class="line"></span><br><span class="line">site.<span class="property">posts</span>.<span class="title function_">sort</span>(<span class="title class_">Reverse</span> = <span class="title class_">True</span>)</span><br></pre></td></tr></table></figure>
<h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>都出现了类似的报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">     （报错代码片段）：</span><br><span class="line">     ERROR Render HTML failed: 404.html</span><br><span class="line">     TypeError: Cannot <span class="built_in">read</span> property <span class="string">&#x27;replace&#x27;</span> of null</span><br><span class="line">     at Hexo.externalLinkFilter (E:\hexo\node_modules\hexo\lib\plugins\filter\after_render\external_link.js:45:15)</span><br><span class="line">     at Hexo.tryCatcher (E:\hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">     at Hexo. (E:\hexo\node_modules\bluebird\js\release\method.js:15:34)</span><br><span class="line">     at Promise.each.filter (E:\hexo\node_modules\hexo\lib\extend\filter.js:60:50)</span><br><span class="line">     at tryCatcher (E:\hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">     at Object.gotValue (E:\hexo\node_modules\bluebird\js\release\reduce.js:166:18)</span><br><span class="line">    at Object.gotAccum (E:\hexo\node_modules\bluebird\js\release\reduce.js:155:25)</span><br><span class="line">    at Object.tryCatcher (E:\hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\hexo\node_modules\bluebird\js\release\promise.js:547:31)</span><br><span class="line">    at Promise._settlePromise (E:\hexo\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromiseCtx (E:\hexo\node_modules\bluebird\js\release\promise.js:641:10)</span><br><span class="line">    at _drainQueueStep (E:\hexo\node_modules\bluebird\js\release\async.js:97:12)</span><br><span class="line">    at _drainQueue (E:\hexo\node_modules\bluebird\js\release\async.js:86:9)</span><br><span class="line">    at Async._drainQueues (E:\hexo\node_modules\bluebird\js\release\async.js:102:5)</span><br><span class="line">    at Immediate.Async.drainQueues [as _onImmediate] (E:\hexo\node_modules\bluebird\js\release\async.js:15:14)</span><br><span class="line">    at runCallback (timers.js:705:18)</span><br><span class="line">    at tryOnImmediate (timers.js:676:5)</span><br><span class="line">    at processImmediate (timers.js:658:5)</span><br><span class="line">    ERROR Render HTML failed: categories/index.html</span><br><span class="line">    TypeError: Cannot <span class="built_in">read</span> property <span class="string">&#x27;replace&#x27;</span> of null</span><br><span class="line">    at Hexo.externalLinkFilter (E:\hexo\node_modules\hexo\lib\plugins\filter\after_render\external_link.js:45:15)</span><br><span class="line">    at Hexo.tryCatcher (E:\hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Hexo. (E:\hexo\node_modules\bluebird\js\release\method.js:15:34)</span><br><span class="line">    at Promise.each.filter (E:\hexo\node_modules\hexo\lib\extend\filter.js:60:50)</span><br><span class="line">    at tryCatcher (E:\hexo\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Object.gotValue (E:\hexo\node_modules\bluebird\js\release\reduce.js:166:18)</span><br><span class="line">    at Object.gotAccum (E:\hexo\node_modules\bluebird\js\release\reduce.js:155:25)</span><br></pre></td></tr></table></figure>

<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>经静下心来思考，想到既然：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.<span class="property">posts</span>.<span class="title function_">sort</span>(<span class="string">&#x27;-date&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>这样不报错，而：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.<span class="property">posts</span>.<span class="title function_">toArray</span>().<span class="title function_">sort</span>(<span class="string">&#x27;-date&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>转换为数组后再排序就报错。</p>
<p>为何不试下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">site.<span class="property">posts</span>.<span class="title function_">sort</span>(<span class="string">&#x27;-date&#x27;</span>).<span class="title function_">toArray</span>()</span><br></pre></td></tr></table></figure>
<p>先排序好再转换为数组？</p>
<h3 id="成功实现"><a href="#成功实现" class="headerlink" title="成功实现"></a>成功实现</h3><p>修改过后重新部署，成功实现！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--近期文章版块 began--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">recent_posts</span> %&#125;</span><br><span class="line">	&lt;div <span class="keyword">class</span>=<span class="string">&quot;links-of-blogroll motion-element &#123;&#123; &quot;</span>links-<span class="keyword">of</span>-blogroll-<span class="string">&quot; + theme.recent_posts_layout  &#125;&#125;&quot;</span>&gt;</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;&#123; theme.recent_posts_title &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			&#123;% set posts = site.posts.sort(&#x27;-date&#x27;).toArray() %&#125;</span></span><br><span class="line"><span class="language-xml">        	&#123;% for post in posts.slice(0,5) %&#125;</span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&#x27;my-links-of-blogroll-li&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">title</span>= <span class="string">&quot;&#123;&#123; post.title &#125;&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;% endfor %&#125;                  </span></span><br><span class="line"><span class="language-xml">    	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;!--近期文章版块 end--&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/09/%E5%8D%9A%E5%AE%A2%E8%BF%91%E6%9C%9F%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/2.png" alt="2"></p>
<p>成功实现新版Next主题的近期文章功能。<br>这其中的修改要兼顾Nexo和Next主题模板引擎Nunjucks！</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Web</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>盛最多水的容器</title>
    <url>/2020/04/07/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>你不能倾斜容器，且 n 的值至少为 2。</p>
<p><img src="/2020/04/07/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/1.jpg" alt="1"></p>
<p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49</p>
<span id="more"></span>

<h2 id="Python解："><a href="#Python解：" class="headerlink" title="Python解："></a>Python解：</h2><h3 id="原理：左右夹逼"><a href="#原理：左右夹逼" class="headerlink" title="原理：左右夹逼"></a>原理：左右夹逼</h3><p>假设纵向为边，通过比较左右两边的高度，选择小的边持续向高的边“前进”(改变索引），遇到比自己高的边就求面积（小边高 * 索引差值），并与先前的面积比较，保存最大面积。如果下一次的边比先前的最高边要大，“切换方向”，按先前的最高边向此时的新高边前进。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">self, height</span>):</span><br><span class="line">        i, j, res = <span class="number">0</span>, <span class="built_in">len</span>(height) - <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> height[i] &lt; height [j]:</span><br><span class="line">                res = <span class="built_in">max</span>(res, height[i] * (j - i)) <span class="comment">#注意容器最大容量由较小的边决定</span></span><br><span class="line">                i += <span class="number">1</span> <span class="comment">#从左向右缩小</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="comment">#切换方向</span></span><br><span class="line">                res = <span class="built_in">max</span>(res,height[j] * (j - i))</span><br><span class="line">                j -= <span class="number">1</span> <span class="comment">#从右向左缩小</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p>耗时：40ms</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>移动零</title>
    <url>/2020/04/06/%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><p>输入: [0,1,0,3,12]<br>输出: [1,3,12,0,0]</p>
<span id="more"></span>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><p>1.必须在原数组上操作，不能拷贝额外的数组。<br>2.尽量减少操作次数。</p>
<h2 id="Python解："><a href="#Python解：" class="headerlink" title="Python解："></a>Python解：</h2><p>新建一个索引，遍历数组，将非零的数移到新索引，零数就移到后面（直接赋值）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">moveZeroes</span>(<span class="params">self, nums</span>):</span><br><span class="line">        j = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != <span class="number">0</span> :</span><br><span class="line">                nums[j] = nums[i] <span class="comment">#交换位置</span></span><br><span class="line">                <span class="keyword">if</span> i != j: <span class="comment">#避免修改同一位置</span></span><br><span class="line">                    nums[i] = <span class="number">0</span></span><br><span class="line">                j += <span class="number">1</span> <span class="comment">#更新索引位置（当前j位置已被非零数占用）</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<p>耗时:24ms</p>
<h2 id="简化："><a href="#简化：" class="headerlink" title="简化："></a>简化：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">moveZeroes</span>(<span class="params">self, nums</span>):</span><br><span class="line">        j = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != <span class="number">0</span> :</span><br><span class="line">                nums[j],nums[i] = nums[i],nums[j] <span class="comment">#位置交换，等价于：z=j, j=i, i=z</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<p>耗时：32ms</p>
<h2 id="最优解：使用xrange"><a href="#最优解：使用xrange" class="headerlink" title="最优解：使用xrange"></a>最优解：使用xrange</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">moveZeroes</span>(<span class="params">self, nums</span>):</span><br><span class="line">        j = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != <span class="number">0</span> :</span><br><span class="line">                nums[j],nums[i] = nums[i],nums[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<p>耗时：28ms</p>
<h2 id="xrange与range区别："><a href="#xrange与range区别：" class="headerlink" title="xrange与range区别："></a>xrange与range区别：</h2><p>1.range和xrange都是在循环中使用，输出结果一样。<br>2.range返回的是一个list对象，而xrange返回的是一个生成器对象(xrange object)。<br>3.xrange则不会直接生成一个list，而是每次调用返回其中的一个值，内存空间使用极少，因而性能非常好。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云服务器部署</title>
    <url>/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>阿里云个人服务器体验版</p>
<h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>Ubuntu14.04 32位</p>
<span id="more"></span>
<h3 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h3><p>python2.7的pip install aiohttp会报错，使用Python3的pip：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure>
<p>注意：python3.4无法安装aiohttp，但安装3.6后与.34共存会破坏pip3，使安装包时报错！</p>
<p>删除Python3.4</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get remove python3.4</span><br></pre></td></tr></table></figure>

<p>获取pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br></pre></td></tr></table></figure>
<p>安装Python3-pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 get-pip.py --force-reinstall</span><br></pre></td></tr></table></figure>
<p>检查pip版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip -V</span><br></pre></td></tr></table></figure>
<p>发现pip变成python3.6的包路径下了，2.7的pip没了。</p>
<p>重新安装Python2-pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python2 get-pip.py --force-reinstall</span><br></pre></td></tr></table></figure>
<p>重新安装Python3-pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure>
<p>再次检查pip版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>
<p>显示定向到python3.6；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip -V</span><br></pre></td></tr></table></figure>
<p>显示定向到python2.7，成功！</p>
<p>最后再试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install aiohttp aiomysql jinja2</span><br></pre></td></tr></table></figure>
<p>没有报错了！</p>
<p>如果后面再报无sourcefileloader的错误就：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 get-pip.py --force-reinstall</span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/1.png" alt="1"></p>
<h3 id="安装虚拟服务"><a href="#安装虚拟服务" class="headerlink" title="安装虚拟服务"></a>安装虚拟服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure>

<h3 id="修改默认版本方法"><a href="#修改默认版本方法" class="headerlink" title="修改默认版本方法"></a>修改默认版本方法</h3><p>配置只输入python3时就默认使用3.6版本：<br>也可使用上面链接里说明的方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1</span><br><span class="line">update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2</span><br><span class="line">update-alternatives --config python3</span><br><span class="line">python3 -V</span><br></pre></td></tr></table></figure>
<p>设置pip:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip　　　　<span class="comment"># Python3</span></span><br><span class="line">apt-get install python-pip　　　　  <span class="comment"># Python2</span></span><br></pre></td></tr></table></figure>
<p>来自 <a href="https://www.cnblogs.com/eczhou/p/10245331.html">https://www.cnblogs.com/eczhou/p/10245331.html</a> </p>
<h3 id="尝试安装"><a href="#尝试安装" class="headerlink" title="尝试安装"></a>尝试安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:jonathonf/python-3.6</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python3.6</span><br></pre></td></tr></table></figure>
<p>若 add-apt-repository 未安装，则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common python-software-properties</span><br></pre></td></tr></table></figure>
<p>↑↑↑还是解决不了，出现报错，无法安装aiomysql</p>
<h2 id="初始化硬盘，重新配置"><a href="#初始化硬盘，重新配置" class="headerlink" title="初始化硬盘，重新配置"></a>初始化硬盘，重新配置</h2><h3 id="安装相应依赖"><a href="#安装相应依赖" class="headerlink" title="安装相应依赖"></a>安装相应依赖</h3><p>zlib1g和zlib1g-dev<br>下载：<br>zlib1g_1.2.8.dfsg-1ubuntu1.1_i386.deb和zlib1g-dev_1.2.8.dfsg-1ubuntu1_i386.deb</p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i zlib1g_1.2.8.dfsg-1ubuntu1.1_i386.deb</span><br><span class="line">sudo dpkg -i zlib1g-dev_1.2.8.dfsg-1ubuntu1_i386.deb</span><br></pre></td></tr></table></figure>
<p>检查是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -l|grep zlib</span><br></pre></td></tr></table></figure>

<h3 id="安装python3-6-9："><a href="#安装python3-6-9：" class="headerlink" title="安装python3.6.9："></a>安装python3.6.9：</h3><p>新建路径：<br>&#x2F;opt&#x2F;setups&#x2F;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> setups</span><br></pre></td></tr></table></figure>
<p>进入上面的路径，下载压缩包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz</span><br></pre></td></tr></table></figure>

<p>解压：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar zxvf Python-3.6.3.tgz</span><br></pre></td></tr></table></figure>
<p>进入安装包的路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.6.9</span><br></pre></td></tr></table></figure>
<p>然后把python安装到文件夹&#x2F;usr&#x2F;local&#x2F;python3下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./configure --prefix=/usr/local/python3</span><br></pre></td></tr></table></figure>
<p>执行make命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure>
<p>执行make install：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h3 id="删除软连接："><a href="#删除软连接：" class="headerlink" title="删除软连接："></a>删除软连接：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /usr/bin/python3</span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/2.png" alt="2"></p>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/3.png" alt="3"></p>
<h3 id="pip3-install的时候报错’lsb-release-a’"><a href="#pip3-install的时候报错’lsb-release-a’" class="headerlink" title="pip3 install的时候报错’lsb_release -a’"></a>pip3 install的时候报错’lsb_release -a’</h3><p>python3.6.9不支持lsb_release -a命令，所以就会报那个错误，但是系统自带的python3.5支持这个命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/bin/lsb_release</span><br></pre></td></tr></table></figure>
<p>把文件&#x2F;usr&#x2F;bin&#x2F;lsb_release的第一行换成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python3.4 -Es</span></span><br></pre></td></tr></table></figure>
<p>然后发现pip版本需要升级：<br><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/4.png" alt="4"></p>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/5.png" alt="5"><br>出现了之前一直无法解决的问题↑↑</p>
<h3 id="安装libssl-dev"><a href="#安装libssl-dev" class="headerlink" title="安装libssl-dev"></a>安装libssl-dev</h3><p>启动系统框架并执行更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg --add-architecture i386</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install libssl-dev</span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/6.png" alt="6"></p>
<p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure>
<p>该命令的含义是去补全那些缺少的软件。</p>
<p>重新执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssl</span><br><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/7.png" alt="7"></p>
<p>成功！！</p>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/8.png" alt="8"></p>
<h3 id="测试app-py"><a href="#测试app-py" class="headerlink" title="测试app.py"></a>测试app.py</h3><p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/9.png" alt="9"></p>
<p>对python3.6重新编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.6.9</span><br><span class="line">sudo ./configure --with-ssl --prefix=/usr/local/python3 （安装的路径一定要和第一次一样）</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>测试成功。</p>
<h3 id="配置supervisor"><a href="#配置supervisor" class="headerlink" title="配置supervisor"></a>配置supervisor</h3><p>awesome.conf:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> = python3 /srv/awesome/www/app.py</span><br></pre></td></tr></table></figure>
<p>发现可以运行，不用建虚拟环境了~</p>
<h3 id="文件修改的更新"><a href="#文件修改的更新" class="headerlink" title="文件修改的更新"></a>文件修改的更新</h3><p>在windows下执行fabfile.py即可实现文件修改的更新，需要注意的是，ip填写阿里云提供的公网ip，遇到无法删除的目录，可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf</span><br></pre></td></tr></table></figure>

<h3 id="修改安全组规整"><a href="#修改安全组规整" class="headerlink" title="修改安全组规整"></a>修改安全组规整</h3><p>在外网进入部署的网站前， 还要在阿里云修改安全组规整:</p>
<p><img src="/2019/11/09/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/10.png" alt="10"></p>
<p>这样就可以直接使用ip地址访问页面了。</p>
<p>至此阿里云ubuntu14.04 32位服务器就部署完成了，部分内容与上一章页如出一辙，部分难以解决的问题在这里进行的分析解决。</p>
<p>要是可以使用企业版的服务器，系统版本可以选择Ubuntu16，就不会出现这么多报错，也不用这么麻烦了！ε&#x3D;(´ο｀*)))</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>算法思维导图</title>
    <url>/2020/04/03/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    <content><![CDATA[<span id="more"></span>
<p><img src="/2020/04/03/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/1.png" alt="1"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>部署Python Web App</title>
    <url>/2019/11/07/%E9%83%A8%E7%BD%B2Python%20Web%20App/</url>
    <content><![CDATA[<h2 id="Linux端-服务器）Ubuntu18-04-3："><a href="#Linux端-服务器）Ubuntu18-04-3：" class="headerlink" title="Linux端(服务器）Ubuntu18.04.3："></a>Linux端(服务器）Ubuntu18.04.3：</h2><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>ssh服务；<br>Nginx （web服务器）；<br>Supervisor（python3）监控服务，管理进程；<br>Mysql；<br>jinjia2；<br>aiomysql；<br>aiohttp；<br>python3；</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install nginx supervisor python3 mysql-server</span><br><span class="line"></span><br><span class="line">$ sudo pip3 install jinja2 aiomysql aiohttp</span><br></pre></td></tr></table></figure>

<h3 id="初始化Mysql数据库："><a href="#初始化Mysql数据库：" class="headerlink" title="初始化Mysql数据库："></a>初始化Mysql数据库：</h3><p>进入mysql命令行，使用source + sql文件路径执行脚本创建表；</p>
<h3 id="定义目录结构："><a href="#定义目录结构：" class="headerlink" title="定义目录结构："></a>定义目录结构：</h3><p>&#x2F;<br>+- srv&#x2F;<br>   +- awesome&#x2F;       &lt;– Web App根目录<br>      +- www&#x2F;        &lt;– 存放Python源码<br>      |  +- static&#x2F;  &lt;– 存放静态资源文件<br>      +- log&#x2F;        &lt;– 存放log</p>
<h3 id="使用虚拟环境："><a href="#使用虚拟环境：" class="headerlink" title="使用虚拟环境："></a>使用虚拟环境：</h3><p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install virtualenv</span><br></pre></td></tr></table></figure>

<p>创建:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv .<span class="built_in">env</span> --python=python3</span><br></pre></td></tr></table></figure>

<p>激活:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .<span class="built_in">env</span>/bin/activate</span><br></pre></td></tr></table></figure>

<h3 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h3><p>生成配置文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">echo_supervisord_conf &gt; supervisord.conf</span><br></pre></td></tr></table></figure>

<p>配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awesome.conf(位于etc/supervisor/conf.d):</span><br><span class="line"><span class="built_in">command</span> = /home/such/.env/bin/python3 /srv/awesome/www/app.py runserver</span><br></pre></td></tr></table></figure>

<p>注意：supervisor不要添加多个command，如果其中一个command出错，而另一个正常，则整体还是可以运行的！！<br>即：command &#x3D; 。。。<br>       command &#x3D;。。。</p>
<p>编写一个Supervisor的配置文件awesome.conf，存放到&#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[program:awesome]</span><br><span class="line"><span class="built_in">command</span> = /home/such/.env/bin/python3 /srv/awesome/www/app.py runserver</span><br><span class="line">directory   = /srv/awesome/www</span><br><span class="line">user        = such</span><br><span class="line">startsecs   = 3</span><br><span class="line">redirect_stderr         = <span class="literal">true</span></span><br><span class="line">stdout_logfile_maxbytes = 50MB</span><br><span class="line">stdout_logfile_backups  = 10</span><br><span class="line">stdout_logfile          = /srv/awesome/log/app.log</span><br></pre></td></tr></table></figure>

<p>配置文件通过[program:awesome]指定服务名为awesome，command指定启动app.py。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">执行配置更新：</span><br><span class="line"><span class="variable">$sudo</span> supervisorctl reread</span><br><span class="line"><span class="variable">$sudo</span> supervisorctl update</span><br><span class="line"><span class="variable">$sudo</span> supervisorctl reload</span><br><span class="line"><span class="variable">$sudo</span> supervisorctl start awesome</span><br></pre></td></tr></table></figure>

<h3 id="nginx配置："><a href="#nginx配置：" class="headerlink" title="nginx配置："></a>nginx配置：</h3><p>&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;下有个default文件，添加新配置awesome并不会生效。因此直接修改default文件进行配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80; <span class="comment"># 监听80端口</span></span><br><span class="line">root       /srv/awesome/www;</span><br><span class="line">    access_log /srv/awesome/log/access_log;</span><br><span class="line">    error_log  /srv/awesome/log/error_log;</span><br><span class="line"><span class="comment"># server_name awesome.liaoxuefeng.com; # 配置域名</span></span><br><span class="line"><span class="comment"># 处理静态文件/favicon.ico:</span></span><br><span class="line">    location /favicon.ico &#123;</span><br><span class="line">        root /srv/awesome/www;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 处理静态资源:</span></span><br><span class="line">    location ~ ^\/static\/.*$ &#123;</span><br><span class="line">        root /srv/awesome/www;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 动态请求转发到9000端口:</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass       http://127.0.0.1:9000;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在&#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;目录下创建软链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/etc/nginx/sites-enabled</span><br><span class="line">$ sudo <span class="built_in">ln</span> -s /etc/nginx/sites-available/awesome</span><br><span class="line">让Nginx重新加载配置文件:</span><br><span class="line">$ sudo /etc/init.d/nginx reload</span><br></pre></td></tr></table></figure>

<h3 id="获取ip："><a href="#获取ip：" class="headerlink" title="获取ip："></a>获取ip：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig -a</span><br></pre></td></tr></table></figure>

<h2 id="未找到dos2unix报错"><a href="#未找到dos2unix报错" class="headerlink" title="未找到dos2unix报错:"></a>未找到dos2unix报错:</h2><h3 id="1-安装tofrodos"><a href="#1-安装tofrodos" class="headerlink" title="1.安装tofrodos"></a>1.安装tofrodos</h3><p>sudo apt-get install tofrodos<br>实际上它安装了两个工具：todos（相当于unix2dos），和fromdos（相当于dos2unix）</p>
<h3 id="2-做一些优化"><a href="#2-做一些优化" class="headerlink" title="2.做一些优化"></a>2.做一些优化</h3><p>由于习惯了unix2dos和dos2unix的命令，可以把上面安装的两个工具链接成unix2dos 和dos2unix，或者仅仅是起个别名，并放在启动脚本里。<br>步骤：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/bin/todos /usr/bin/unix2dos </span><br><span class="line"><span class="built_in">ln</span> -s /usr/bin/fromdos /usr/bin/dos2unix</span><br></pre></td></tr></table></figure>


<h2 id="开发机："><a href="#开发机：" class="headerlink" title="开发机："></a>开发机：</h2><h3 id="Fabric（python2-7）自动化部署工具"><a href="#Fabric（python2-7）自动化部署工具" class="headerlink" title="Fabric（python2.7）自动化部署工具"></a>Fabric（python2.7）自动化部署工具</h3><p>若使用windows，则安装Fabric3（python3)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install fabric3</span><br></pre></td></tr></table></figure>

<p>fabfile.py: 放在awesome-python-webapp，与www同级</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Deployment toolkit in windows envirement.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os, re, tarfile</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> *</span><br><span class="line">env.user = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">env.sudo_user = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"><span class="comment"># env.hosts = [&#x27;123.123.123.123&#x27;]</span></span><br><span class="line">env.host_string = <span class="string">&#x27;47.106.33.242&#x27;</span> <span class="comment"># 改成你的服务器ip</span></span><br><span class="line">db_user = <span class="string">&#x27;Blog&#x27;</span></span><br><span class="line">db_password = <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line">_TAR_FILE = <span class="string">&#x27;dist-awesome.tar.gz&#x27;</span></span><br><span class="line">_REMOTE_TMP_TAR = <span class="string">&#x27;/tmp/%s&#x27;</span> % _TAR_FILE</span><br><span class="line">_REMOTE_BASE_DIR = <span class="string">&#x27;/srv/awesome&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_current_path</span>():</span><br><span class="line">    <span class="keyword">return</span> os.path.abspath(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_now</span>():</span><br><span class="line">    <span class="keyword">return</span> datetime.now().strftime(<span class="string">&#x27;%y-%m-%d_%H.%M.%S&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>():</span><br><span class="line">    <span class="comment"># includes = [&#x27;static&#x27;, &#x27;templates&#x27;, &#x27;transwarp&#x27;, &#x27;favicon.ico&#x27;, &#x27;*.py&#x27;]</span></span><br><span class="line">    <span class="comment"># excludes = [&#x27;test&#x27;, &#x27;.*&#x27;, &#x27;*.pyc&#x27;, &#x27;*.pyo&#x27;]</span></span><br><span class="line">    local(<span class="string">&#x27;del dist\\%s&#x27;</span> % _TAR_FILE)                   <span class="comment"># 删除旧压缩包</span></span><br><span class="line">    tar = tarfile.<span class="built_in">open</span>(<span class="string">&quot;dist/%s&quot;</span> % _TAR_FILE,<span class="string">&quot;w:gz&quot;</span>)    <span class="comment"># 创建新压缩包</span></span><br><span class="line">    <span class="keyword">for</span> root,_<span class="built_in">dir</span>,files <span class="keyword">in</span> os.walk(<span class="string">&quot;www/&quot;</span>):             <span class="comment"># 打包www文件夹</span></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ((<span class="string">&#x27;.pyc&#x27;</span> <span class="keyword">in</span> f) <span class="keyword">or</span> (<span class="string">&#x27;.pyo&#x27;</span> <span class="keyword">in</span> f)):    <span class="comment"># 排除开发过程调试产生的文件，为了简单点实现，此处没有完全照搬廖老师的参数</span></span><br><span class="line">                fullpath = os.path.join(root,f)</span><br><span class="line">                tar.add(fullpath)</span><br><span class="line">    tar.close()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deploy</span>():</span><br><span class="line">    newdir = <span class="string">&#x27;www-%s&#x27;</span> % _now()</span><br><span class="line">    run(<span class="string">&#x27;rm -rf %s&#x27;</span> % _REMOTE_TMP_TAR)</span><br><span class="line">    put(<span class="string">&#x27;dist/%s&#x27;</span> % _TAR_FILE, _REMOTE_TMP_TAR)</span><br><span class="line">    <span class="keyword">with</span> cd(_REMOTE_BASE_DIR):</span><br><span class="line">        sudo(<span class="string">&#x27;mkdir %s&#x27;</span> % newdir)</span><br><span class="line">    <span class="keyword">with</span> cd(<span class="string">&#x27;%s/%s&#x27;</span> % (_REMOTE_BASE_DIR, newdir)):</span><br><span class="line">        sudo(<span class="string">&#x27;tar -xzvf %s&#x27;</span> % _REMOTE_TMP_TAR) <span class="comment"># 解压</span></span><br><span class="line">        sudo(<span class="string">&#x27;mv www/* .&#x27;</span>)          <span class="comment"># 解压后多一层www文件夹，因此向上移动一层</span></span><br><span class="line">        sudo(<span class="string">&#x27;rm -rf www&#x27;</span>)          <span class="comment"># 删除空文件夹www</span></span><br><span class="line">        sudo(<span class="string">&#x27;dos2unix app.py&#x27;</span>)     <span class="comment"># 解决windows和linux行尾换行不同问题</span></span><br><span class="line">        sudo(<span class="string">&#x27;chmod a+x app.py&#x27;</span>)    <span class="comment"># 使app.py可直接执行</span></span><br><span class="line">    <span class="keyword">with</span> cd(_REMOTE_BASE_DIR):</span><br><span class="line">        sudo(<span class="string">&#x27;rm -rf www&#x27;</span>)               <span class="comment"># 删除旧软链接</span></span><br><span class="line">        sudo(<span class="string">&#x27;ln -s %s www&#x27;</span> % newdir)   <span class="comment"># 创建新链接</span></span><br><span class="line">        sudo(<span class="string">&#x27;chown root:root www&#x27;</span>) <span class="comment"># user改为你的linux服务器上的用户名</span></span><br><span class="line">        sudo(<span class="string">&#x27;chown -R root:root %s&#x27;</span> % newdir) <span class="comment"># 同上</span></span><br><span class="line">    <span class="keyword">with</span> settings(warn_only=<span class="literal">True</span>):</span><br><span class="line">        sudo(<span class="string">&#x27;supervisorctl stop awesome&#x27;</span>) <span class="comment"># supervisor重启app</span></span><br><span class="line">        sudo(<span class="string">&#x27;supervisorctl start awesome&#x27;</span>)</span><br><span class="line">        sudo(<span class="string">&#x27;/etc/init.d/nginx reload&#x27;</span>) <span class="comment"># nginx重启</span></span><br><span class="line">RE_FILES = re.<span class="built_in">compile</span>(<span class="string">&#x27;\r?\n&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rollback</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    rollback to previous version</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> cd(_REMOTE_BASE_DIR):</span><br><span class="line">        r = run(<span class="string">&#x27;ls -p -1&#x27;</span>)</span><br><span class="line">        files = [s[:-<span class="number">1</span>] <span class="keyword">for</span> s <span class="keyword">in</span> RE_FILES.split(r) <span class="keyword">if</span> s.startswith(<span class="string">&#x27;www-&#x27;</span>) <span class="keyword">and</span> s.endswith(<span class="string">&#x27;/&#x27;</span>)]</span><br><span class="line">        files.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        r = run(<span class="string">&#x27;ls -l www&#x27;</span>)</span><br><span class="line">        ss = r.split(<span class="string">&#x27; -&gt; &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(ss) != <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;ERROR: \&#x27;www\&#x27; is not a symbol link.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        current = ss[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Found current symbol link points to: %s\n&#x27;</span> % current)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            index = files.index(current)</span><br><span class="line">        <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;ERROR: symbol link is invalid.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(files) == index + <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;ERROR: already the oldest version.&#x27;</span>)</span><br><span class="line">        old = files[index + <span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;==================================================&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> f == current:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;      Current ---&gt; %s&#x27;</span> % current)</span><br><span class="line">            <span class="keyword">elif</span> f == old:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;  Rollback to ---&gt; %s&#x27;</span> % old)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;                   %s&#x27;</span> % f)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;==================================================&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        yn = <span class="built_in">input</span> (<span class="string">&#x27;continue? y/N &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> yn != <span class="string">&#x27;y&#x27;</span> <span class="keyword">and</span> yn != <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Rollback cancelled.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Start rollback...&#x27;</span>)</span><br><span class="line">        sudo(<span class="string">&#x27;rm -rf www&#x27;</span>)</span><br><span class="line">        sudo(<span class="string">&#x27;ln -s %s www&#x27;</span> % old)</span><br><span class="line">        sudo(<span class="string">&#x27;chown www-data:www-data www&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> settings(warn_only=<span class="literal">True</span>):</span><br><span class="line">            sudo(<span class="string">&#x27;supervisorctl stop awesome&#x27;</span>)</span><br><span class="line">            sudo(<span class="string">&#x27;supervisorctl start awesome&#x27;</span>)</span><br><span class="line">            sudo(<span class="string">&#x27;/etc/init.d/nginx reload&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ROLLBACKED OK.&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backup</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Dump entire database on server and backup to local.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    dt = _now()</span><br><span class="line">    f = <span class="string">&#x27;backup-awesome-%s.sql&#x27;</span> % dt</span><br><span class="line">    <span class="keyword">with</span> cd(<span class="string">&#x27;/tmp&#x27;</span>):</span><br><span class="line">        run(<span class="string">&#x27;mysqldump --user=%s --password=%s --skip-opt --add-drop-table --default-character-set=utf8 --quick awesome &gt; %s&#x27;</span> % (db_user, db_password, f))</span><br><span class="line">        run(<span class="string">&#x27;tar -czvf %s.tar.gz %s&#x27;</span> % (f, f))</span><br><span class="line">        get(<span class="string">&#x27;%s.tar.gz&#x27;</span> % f, <span class="string">&#x27;%s/backup/&#x27;</span> % _current_path())</span><br><span class="line">        run(<span class="string">&#x27;rm -rf %s&#x27;</span> % f)</span><br><span class="line">        run(<span class="string">&#x27;rm -rf %s.tar.gz&#x27;</span> % f)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restore2local</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Restore db to local</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    backup_dir = os.path.join(_current_path(), <span class="string">&#x27;backup&#x27;</span>)</span><br><span class="line">    fs = os.listdir(backup_dir)</span><br><span class="line">    files = [f <span class="keyword">for</span> f <span class="keyword">in</span> fs <span class="keyword">if</span> f.startswith(<span class="string">&#x27;backup-&#x27;</span>) <span class="keyword">and</span> f.endswith(<span class="string">&#x27;.sql.tar.gz&#x27;</span>)] <span class="comment"># 获取备份文件列表</span></span><br><span class="line">    files.sort(reverse = <span class="literal">True</span>) <span class="comment"># 最近的文件排在前面</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(files)==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;No backup files found.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Found %s backup files:&#x27;</span> % <span class="built_in">len</span>(files))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;==================================================&#x27;</span>)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (n, f))</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;==================================================&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num = <span class="built_in">int</span>(<span class="built_in">input</span> (<span class="string">&#x27;Restore file: &#x27;</span>)) <span class="comment"># 选择恢复哪个备份</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Invalid file number.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    restore_file = files[num]</span><br><span class="line">    yn = <span class="built_in">input</span>(<span class="string">&#x27;Restore file %s: %s? y/N &#x27;</span> % (num, restore_file)) <span class="comment"># 确定开始恢复</span></span><br><span class="line">    <span class="keyword">if</span> yn != <span class="string">&#x27;y&#x27;</span> <span class="keyword">and</span> yn != <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Restore cancelled.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Start restore to local database...&#x27;</span>)</span><br><span class="line">    p = <span class="built_in">input</span>(<span class="string">&#x27;Input mysql root password: &#x27;</span>)</span><br><span class="line">    sqls = [</span><br><span class="line">        <span class="string">&#x27;drop database if exists awesome;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;create database awesome;&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;alter database awesome default character set utf8 collate utf8_general_ci;&#x27;</span> <span class="comment"># 修改为utf8字符集</span></span><br><span class="line">        <span class="string">&#x27;grant select, insert, update, delete on awesome.* to \&#x27;%s\&#x27;@\&#x27;localhost\&#x27; identified by \&#x27;%s\&#x27;;&#x27;</span> % (db_user, db_password)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> sql <span class="keyword">in</span> sqls:</span><br><span class="line">        local(<span class="string">r&#x27;mysql -uroot -p%s -e &quot;%s&quot;&#x27;</span> % (p, sql))  <span class="comment"># 删除旧数据库，新建数据库，授权给用户</span></span><br><span class="line">    extract(<span class="string">&#x27;backup\\%s&#x27;</span> % restore_file, <span class="string">&#x27;backup\\&#x27;</span>)    <span class="comment"># 解压</span></span><br><span class="line">    <span class="keyword">with</span> lcd(<span class="string">&#x27;backup&#x27;</span>):</span><br><span class="line">        <span class="comment"># linux系统和windows系统之间数据库导入导出，可能因为字符集不同出现&#x27;unknown command \\&#x27;错误</span></span><br><span class="line">        <span class="comment"># 通过在创建数据库后修改为utf8字符集，以及导入时指定--default-character-set=utf8，解决这个问题</span></span><br><span class="line">        local(<span class="string">r&#x27;mysql -uroot -p%s --default-character-set=utf8 awesome &lt; %s&#x27;</span> % (p, restore_file[:-<span class="number">7</span>])) <span class="comment"># 导入数据库</span></span><br><span class="line">        local(<span class="string">&#x27;del %s&#x27;</span> % restore_file[:-<span class="number">7</span>]) <span class="comment"># 删除解压出的文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract</span>(<span class="params">tar_path, target_path</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    解压tar.gz文件到目标目录</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tar = tarfile.<span class="built_in">open</span>(tar_path, <span class="string">&quot;r:gz&quot;</span>)</span><br><span class="line">        file_names = tar.getnames()</span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">            tar.extract(file_name, target_path)</span><br><span class="line">        tar.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    build()</span><br><span class="line">    deploy()</span><br><span class="line">    <span class="comment"># rollback()</span></span><br><span class="line">    <span class="comment"># backup()</span></span><br><span class="line">    <span class="comment"># restore2local()</span></span><br><span class="line">    <span class="built_in">input</span>()</span><br></pre></td></tr></table></figure>
<p>直接运行fabfile.py即可连接linux服务器；</p>
<h3 id="如果使用Linux："><a href="#如果使用Linux：" class="headerlink" title="如果使用Linux："></a>如果使用Linux：</h3><p>提交修改:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fab build</span><br></pre></td></tr></table></figure>
<p>实行应用:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fab deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Windows</tag>
        <tag>Linux</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
